'Endereco padrao
CONST DXM_LocalReg	= 199

'HoldingReg padrao
CONST HoldingReg = 0

'MODBUSTYPE para cada porta
CONST Port_0 = 0
CONST Port_1 = 256
CONST Port_2 = 512
CONST Port_3 = 768
CONST Port_4 = 1024

'SLAVE IDs somado do offset para porta
CONST MB_Broadcast = 0

' --- Configuracoes DOB1 ---
CONST DOB1_SLAVE_ID = 1                   ' Exemplo: Slave ID do distribuidor Modbus da DOB1
CONST DOB1_PORT = Port_1                  ' DOB1 conectada na Porta 1 do DXM
' Registradores Locais do DXM para DOB1
CONST DOB1_REG_LOC_INPUT_PART_PULSE = 2   ' ATENCAO: Defina o registrador local para o pulso de contagem de peca da DOB1
CONST DOB1_REG_LOC_TEMPO_CICLO = 1
CONST DOB1_REG_LOC_CONTADOR_PECAS = 3
CONST DOB1_REG_LOC_STATUS_MAQUINA = 11
CONST DOB1_REG_LOC_ACTIVE_CONNECTION = 12  ' Status da Conexao Ativa DOB1 (0=Inativo, 1=Ativo)
CONST DOB1_REG_LOC_INPUT_READY = 7        ' Registrador local do DXM para entrada Ready da DOB1 (ajustar se for de outro local)
CONST DOB1_REG_LOC_INPUT_EMERGENCY = 4    ' Registrador local do DXM para entrada Emergency da DOB1 (ajustar)
CONST DOB1_REG_LOC_INPUT_FALHA = 6        ' Registrador local do DXM para entrada Falha da DOB1
CONST DOB1_REG_LOC_INPUT_RUNNING = 10      ' Registrador local do DXM para entrada Running da DOB1 (Ex: reg 63, ajustar)

' --- Configuracoes DOB2 ---
CONST DOB2_SLAVE_ID = 20                   ' Exemplo: Slave ID do distribuidor Modbus da DOB2 (unico na Port_4)
CONST DOB2_PORT = Port_4                  ' DOB2 conectada via antena na Porta 4 do DXM
' Registradores Locais do DXM para DOB2
CONST DOB2_REG_LOC_INPUT_PART_PULSE = 22   ' ATENCAO: Defina o registrador local para o pulso de contagem de peca da DOB2
CONST DOB2_REG_LOC_TEMPO_CICLO = 21
CONST DOB2_REG_LOC_CONTADOR_PECAS = 23
CONST DOB2_REG_LOC_STATUS_MAQUINA = 31
CONST DOB2_REG_LOC_ACTIVE_CONNECTION = 32  ' Status da Conexao Ativa DOB2
CONST DOB2_REG_LOC_INPUT_READY = 27
CONST DOB2_REG_LOC_INPUT_EMERGENCY = 24
CONST DOB2_REG_LOC_INPUT_FALHA = 26
CONST DOB2_REG_LOC_INPUT_RUNNING = 30      ' Registrador local do DXM para entrada Running da DOB2 (Ex: reg 64, ajustar)

' --- Configuracoes DOB3 ---
CONST DOB3_SLAVE_ID = 21                   ' Exemplo: Slave ID do distribuidor Modbus da DOB3 (unico na Port_4)
CONST DOB3_PORT = Port_4                  ' DOB3 conectada via antena na Porta 4 do DXM
' Registradores Locais do DXM para DOB3
CONST DOB3_REG_LOC_INPUT_PART_PULSE = 42   ' ATENCAO: Defina o registrador local para o pulso de contagem de peca da DOB3
CONST DOB3_REG_LOC_TEMPO_CICLO = 41
CONST DOB3_REG_LOC_CONTADOR_PECAS = 43
CONST DOB3_REG_LOC_STATUS_MAQUINA = 51
CONST DOB3_REG_LOC_ACTIVE_CONNECTION = 52  ' Status da Conexao Ativa DOB3
CONST DOB3_REG_LOC_INPUT_READY = 47
CONST DOB3_REG_LOC_INPUT_EMERGENCY = 44
CONST DOB3_REG_LOC_INPUT_FALHA = 46
CONST DOB3_REG_LOC_INPUT_RUNNING = 50      ' Registrador local do DXM para entrada Running da DOB3 (Ex: reg 65, ajustar)

' --- Status da Maquina ---
' Constantes para os valores de cada bit de status (potencias de 2)
CONST Status_Bit_PlannedDownTime_Val = 1   ' Bit0: 2^0
CONST Status_Bit_Running_Val         = 2   ' Bit1: 2^1
CONST Status_Bit_Starving_Val        = 4   ' Bit2: 2^2
CONST Status_Bit_Blocked_Val         = 8   ' Bit3: 2^3
CONST Status_Bit_Ready_Val           = 16  ' Bit4: 2^4
CONST Status_Bit_Falha_Val           = 32  ' Bit5: 2^5
CONST Status_Bit_Setup_Val           = 64  ' Bit6: 2^6
CONST Status_Bit_Emergencia_Val      = 128 ' Bit7: 2^7

' --- Variaveis Globais para DOB1 ---
' TemponovoPulso_dob1 = 0 ' Removido - Nao mais usado
ContadorPecas_i_dob1 = 0           ' Contador de pecas processado localmente
UltimoStatusPulsoPeca_dob1 = 0     ' Armazena o estado anterior do pulso de contagem de peca
StartTime_dob1 = 0                 ' System time no inicio do ciclo
CycleTime_dob1 = 0                 ' Tempo de ciclo calculado
Ready_input_dob1 = 0
Emergency_input_dob1 = 0
Falha_input_dob1 = 0
Running_input_dob1 = 0
Cond_PlannedDownTime_dob1 = 0
Cond_Running_dob1 = 0
Cond_Starving_dob1 = 0
Cond_Blocked_dob1 = 0
Cond_Ready_dob1 = 0
Cond_Falha_dob1 = 0
Cond_Setup_dob1 = 0
Cond_Emergencia_dob1 = 0
MachineStatusINT_dob1 = 0

' --- Variaveis Globais para DOB2 ---
ContadorPecas_i_dob2 = 0           ' Contador de pecas processado localmente
UltimoStatusPulsoPeca_dob2 = 0     ' Armazena o estado anterior do pulso de contagem de peca
StartTime_dob2 = 0
CycleTime_dob2 = 0
Ready_input_dob2 = 0
Emergency_input_dob2 = 0
Falha_input_dob2 = 0
Running_input_dob2 = 0
Cond_PlannedDownTime_dob2 = 0
Cond_Running_dob2 = 0
Cond_Starving_dob2 = 0
Cond_Blocked_dob2 = 0
Cond_Ready_dob2 = 0
Cond_Falha_dob2 = 0
Cond_Setup_dob2 = 0
Cond_Emergencia_dob2 = 0
MachineStatusINT_dob2 = 0

' --- Variaveis Globais para DOB3 ---
ContadorPecas_i_dob3 = 0           ' Contador de pecas processado localmente
UltimoStatusPulsoPeca_dob3 = 0     ' Armazena o estado anterior do pulso de contagem de peca
StartTime_dob3 = 0
CycleTime_dob3 = 0
Ready_input_dob3 = 0
Emergency_input_dob3 = 0
Falha_input_dob3 = 0
Running_input_dob3 = 0
Cond_PlannedDownTime_dob3 = 0
Cond_Running_dob3 = 0
Cond_Starving_dob3 = 0
Cond_Blocked_dob3 = 0
Cond_Ready_dob3 = 0
Cond_Falha_dob3 = 0
Cond_Setup_dob3 = 0
Cond_Emergencia_dob3 = 0
MachineStatusINT_dob3 = 0

UltimaVerificacaoConexao = 0 ' Tempo da ultima verificacao (em segundos, comparar com GETSYSTIME())

' Variavel global Err para status de operacoes Modbus
Err = 0

FUNCTION CheckError(contextMessage)
    IF Err <> 0 THEN
        ' Em um ambiente de produção, você pode querer logar isso de forma diferente
        ' ou acionar um indicador de erro.
        PRINT "ERRO MODBUS: ", Err, " em ", contextMessage
        ' Considerar uma ação de tratamento de erro mais robusta aqui.
    ENDIF
END FUNCTION

FUNCTION CheckConnection(slaveID, port, reg_active, machineName)
    LOCAL dummyValue, currentTime
    dummyValue = GETREG(1, slaveID, port) ' Tenta ler um registrador qualquer (ex: reg 1)
    currentTime = GETSYSTIME()
    IF Err = 0 THEN
        Err = SETREG(reg_active, 1, DXM_LocalReg, HoldingReg) ' Conexao ativa
        CheckError("CheckConnection " + machineName + " SETREG " + reg_active + " = 1 (Ativo)")
        PRINT "Conexao com ", machineName, " (Slave ", slaveID, " na porta ", port, ") VERIFICADA e ATIVA.\n"
    ELSE
        Err = SETREG(reg_active, 0, DXM_LocalReg, HoldingReg) ' Erro na conexao
        CheckError("CheckConnection " + machineName + " SETREG " + reg_active + " = 0 (Inativo)")
        PRINT "ERRO de conexao com ", machineName, " (Slave ", slaveID, " na porta ", port, ").\n"
    ENDIF
END FUNCTION

FUNCTION ActiveConnection()
    LOCAL currentTime
    currentTime = GETSYSTIME()
    
    ' Verifica a cada 15 minutos (900 segundos) após a primeira verificacao (UltimaVerificacaoConexao = 0)
    IF UltimaVerificacaoConexao = 0 OR currentTime - UltimaVerificacaoConexao >= 900 THEN
        CheckConnection(DOB1_SLAVE_ID, DOB1_PORT, DOB1_REG_LOC_ACTIVE_CONNECTION, "DOB1")
        CheckConnection(DOB2_SLAVE_ID, DOB2_PORT, DOB2_REG_LOC_ACTIVE_CONNECTION, "DOB2")
        CheckConnection(DOB3_SLAVE_ID, DOB3_PORT, DOB3_REG_LOC_ACTIVE_CONNECTION, "DOB3")
        UltimaVerificacaoConexao = currentTime
    ENDIF
END FUNCTION


FUNCTION ResetTimer(TReg)
    Err = SETREG(TReg, 0, DXM_LocalReg, HoldingReg) ' Reseta um registrador local do DXM (usado como timer)
    CheckError("ResetTimer TReg: " + TReg)
END FUNCTION

FUNCTION TempoDeCicloEContagem_dob1()
    LOCAL StatusAtualPulsoPeca_val, EndTime_val
    
    StatusAtualPulsoPeca_val = GETREG(DOB1_REG_LOC_INPUT_PART_PULSE, DXM_LocalReg, HoldingReg)
    CheckError("TempoDeCicloEContagem_dob1 GETREG DOB1_REG_LOC_INPUT_PART_PULSE")

    IF StatusAtualPulsoPeca_val = 1 AND UltimoStatusPulsoPeca_dob1 = 0 THEN ' Detecta borda de subida do pulso de peca
        ' Incrementa contador de pecas local
        ContadorPecas_i_dob1 = ContadorPecas_i_dob1 + 1
        Err = SETREG(DOB1_REG_LOC_CONTADOR_PECAS, ContadorPecas_i_dob1, DXM_LocalReg, HoldingReg)
        CheckError("TempoDeCicloEContagem_dob1 SETREG DOB1_REG_LOC_CONTADOR_PECAS")
        
        IF StartTime_dob1 <> 0 THEN ' Se um ciclo anterior foi iniciado
            EndTime_val = GETSYSTIME()
            IF EndTime_val >= StartTime_dob1 THEN ' Checagem basica de progressao do tempo
                CycleTime_dob1 = EndTime_val - StartTime_dob1
            ELSE
                CycleTime_dob1 = 0 ' Lida com possivel wrap-around do GETSYSTIME ou erro
            ENDIF
            Err = SETREG(DOB1_REG_LOC_TEMPO_CICLO, CycleTime_dob1, DXM_LocalReg, HoldingReg) ' Armazena o tempo de ciclo calculado
            CheckError("TempoDeCicloEContagem_dob1 SETREG DOB1_REG_LOC_TEMPO_CICLO com valor: " + CycleTime_dob1)
        END IF
        
        ' Inicia a cronometragem para o proximo ciclo
        StartTime_dob1 = GETSYSTIME()
    END IF
    UltimoStatusPulsoPeca_dob1 = StatusAtualPulsoPeca_val ' Atualiza o estado anterior do pulso

    IF ContadorPecas_i_dob1 >= 9999 THEN ' Reset do contador de pecas local
        ContadorPecas_i_dob1 = 0
    END IF
END FUNCTION

FUNCTION LerEntradas_dob1()
    Ready_input_dob1 = GETREG(DOB1_REG_LOC_INPUT_READY, DXM_LocalReg, HoldingReg)
    CheckError("LerEntradas_dob1 GETREG DOB1_REG_LOC_INPUT_READY")
    Emergency_input_dob1 = GETREG(DOB1_REG_LOC_INPUT_EMERGENCY, DXM_LocalReg, HoldingReg)
    CheckError("LerEntradas_dob1 GETREG DOB1_REG_LOC_INPUT_EMERGENCY")
    Falha_input_dob1 = GETREG(DOB1_REG_LOC_INPUT_FALHA, DXM_LocalReg, HoldingReg)
    CheckError("LerEntradas_dob1 GETREG DOB1_REG_LOC_INPUT_FALHA")
    Running_input_dob1 = GETREG(DOB1_REG_LOC_INPUT_RUNNING, DXM_LocalReg, HoldingReg)
    CheckError("LerEntradas_dob1 GETREG DOB1_REG_LOC_INPUT_RUNNING")
END FUNCTION

FUNCTION CalcularEMostrarStatus_dob1()
    LOCAL currentStatusINT
    currentStatusINT = 0
    IF Cond_PlannedDownTime_dob1 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_PlannedDownTime_Val
    IF Cond_Running_dob1 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Running_Val
    IF Cond_Starving_dob1 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Starving_Val
    IF Cond_Blocked_dob1 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Blocked_Val
    IF Cond_Ready_dob1 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Ready_Val
    IF Cond_Falha_dob1 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Falha_Val
    IF Cond_Setup_dob1 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Setup_Val
    IF Cond_Emergencia_dob1 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Emergencia_Val
    
    MachineStatusINT_dob1 = currentStatusINT
    Err = SETREG(DOB1_REG_LOC_STATUS_MAQUINA, MachineStatusINT_dob1, DXM_LocalReg, HoldingReg)
    CheckError("CalcularEMostrarStatus_dob1 SETREG DOB1_REG_LOC_STATUS_MAQUINA com valor: " + MachineStatusINT_dob1)
END FUNCTION

FUNCTION TempoDeCicloEContagem_dob2()
    LOCAL StatusAtualPulsoPeca_val, EndTime_val

    StatusAtualPulsoPeca_val = GETREG(DOB2_REG_LOC_INPUT_PART_PULSE, DXM_LocalReg, HoldingReg)
    CheckError("TempoDeCicloEContagem_dob2 GETREG DOB2_REG_LOC_INPUT_PART_PULSE")

    IF StatusAtualPulsoPeca_val = 1 AND UltimoStatusPulsoPeca_dob2 = 0 THEN ' Detecta borda de subida
        ContadorPecas_i_dob2 = ContadorPecas_i_dob2 + 1
        Err = SETREG(DOB2_REG_LOC_CONTADOR_PECAS, ContadorPecas_i_dob2, DXM_LocalReg, HoldingReg)
        CheckError("TempoDeCicloEContagem_dob2 SETREG DOB2_REG_LOC_CONTADOR_PECAS")
        
        IF StartTime_dob2 <> 0 THEN ' Se um ciclo anterior foi iniciado
            EndTime_val = GETSYSTIME()
            IF EndTime_val >= StartTime_dob2 THEN
                CycleTime_dob2 = EndTime_val - StartTime_dob2
            ELSE
                CycleTime_dob2 = 0
            ENDIF
            Err = SETREG(DOB2_REG_LOC_TEMPO_CICLO, CycleTime_dob2, DXM_LocalReg, HoldingReg)
            CheckError("TempoDeCicloEContagem_dob2 SETREG DOB2_REG_LOC_TEMPO_CICLO com valor: " + CycleTime_dob2)
        END IF
        
        StartTime_dob2 = GETSYSTIME()
    END IF
    UltimoStatusPulsoPeca_dob2 = StatusAtualPulsoPeca_val

    IF ContadorPecas_i_dob2 >= 9999 THEN
        ContadorPecas_i_dob2 = 0
    END IF
END FUNCTION

FUNCTION LerEntradas_dob2()
    Ready_input_dob2 = GETREG(DOB2_REG_LOC_INPUT_READY, DXM_LocalReg, HoldingReg)
    CheckError("LerEntradas_dob2 GETREG DOB2_REG_LOC_INPUT_READY")
    Emergency_input_dob2 = GETREG(DOB2_REG_LOC_INPUT_EMERGENCY, DXM_LocalReg, HoldingReg)
    CheckError("LerEntradas_dob2 GETREG DOB2_REG_LOC_INPUT_EMERGENCY")
    Falha_input_dob2 = GETREG(DOB2_REG_LOC_INPUT_FALHA, DXM_LocalReg, HoldingReg)
    CheckError("LerEntradas_dob2 GETREG DOB2_REG_LOC_INPUT_FALHA")
    Running_input_dob2 = GETREG(DOB2_REG_LOC_INPUT_RUNNING, DXM_LocalReg, HoldingReg)
    CheckError("LerEntradas_dob2 GETREG DOB2_REG_LOC_INPUT_RUNNING")
END FUNCTION

FUNCTION CalcularEMostrarStatus_dob2()
    LOCAL currentStatusINT
    currentStatusINT = 0
    IF Cond_PlannedDownTime_dob2 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_PlannedDownTime_Val
    IF Cond_Running_dob2 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Running_Val
    IF Cond_Starving_dob2 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Starving_Val
    IF Cond_Blocked_dob2 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Blocked_Val
    IF Cond_Ready_dob2 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Ready_Val
    IF Cond_Falha_dob2 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Falha_Val
    IF Cond_Setup_dob2 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Setup_Val
    IF Cond_Emergencia_dob2 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Emergencia_Val
    
    MachineStatusINT_dob2 = currentStatusINT
    Err = SETREG(DOB2_REG_LOC_STATUS_MAQUINA, MachineStatusINT_dob2, DXM_LocalReg, HoldingReg)
    CheckError("CalcularEMostrarStatus_dob2 SETREG DOB2_REG_LOC_STATUS_MAQUINA com valor: " + MachineStatusINT_dob2)
END FUNCTION

FUNCTION TempoDeCicloEContagem_dob3()
    LOCAL StatusAtualPulsoPeca_val, EndTime_val

    StatusAtualPulsoPeca_val = GETREG(DOB3_REG_LOC_INPUT_PART_PULSE, DXM_LocalReg, HoldingReg)
    CheckError("TempoDeCicloEContagem_dob3 GETREG DOB3_REG_LOC_INPUT_PART_PULSE")

    IF StatusAtualPulsoPeca_val = 1 AND UltimoStatusPulsoPeca_dob3 = 0 THEN ' Detecta borda de subida
        ContadorPecas_i_dob3 = ContadorPecas_i_dob3 + 1
        Err = SETREG(DOB3_REG_LOC_CONTADOR_PECAS, ContadorPecas_i_dob3, DXM_LocalReg, HoldingReg)
        CheckError("TempoDeCicloEContagem_dob3 SETREG DOB3_REG_LOC_CONTADOR_PECAS")
        
        IF StartTime_dob3 <> 0 THEN ' Se um ciclo anterior foi iniciado
            EndTime_val = GETSYSTIME()
            IF EndTime_val >= StartTime_dob3 THEN
                CycleTime_dob3 = EndTime_val - StartTime_dob3
            ELSE
                CycleTime_dob3 = 0
            ENDIF
            Err = SETREG(DOB3_REG_LOC_TEMPO_CICLO, CycleTime_dob3, DXM_LocalReg, HoldingReg)
            CheckError("TempoDeCicloEContagem_dob3 SETREG DOB3_REG_LOC_TEMPO_CICLO com valor: " + CycleTime_dob3)
        END IF
        
        StartTime_dob3 = GETSYSTIME()
    END IF
    UltimoStatusPulsoPeca_dob3 = StatusAtualPulsoPeca_val

    IF ContadorPecas_i_dob3 >= 9999 THEN
        ContadorPecas_i_dob3 = 0
    END IF
END FUNCTION

FUNCTION LerEntradas_dob3()
    Ready_input_dob3 = GETREG(DOB3_REG_LOC_INPUT_READY, DXM_LocalReg, HoldingReg)
    CheckError("LerEntradas_dob3 GETREG DOB3_REG_LOC_INPUT_READY")
    Emergency_input_dob3 = GETREG(DOB3_REG_LOC_INPUT_EMERGENCY, DXM_LocalReg, HoldingReg)
    CheckError("LerEntradas_dob3 GETREG DOB3_REG_LOC_INPUT_EMERGENCY")
    Falha_input_dob3 = GETREG(DOB3_REG_LOC_INPUT_FALHA, DXM_LocalReg, HoldingReg)
    CheckError("LerEntradas_dob3 GETREG DOB3_REG_LOC_INPUT_FALHA")
    Running_input_dob3 = GETREG(DOB3_REG_LOC_INPUT_RUNNING, DXM_LocalReg, HoldingReg)
    CheckError("LerEntradas_dob3 GETREG DOB3_REG_LOC_INPUT_RUNNING")
END FUNCTION

FUNCTION CalcularEMostrarStatus_dob3()
    LOCAL currentStatusINT
    currentStatusINT = 0
    IF Cond_PlannedDownTime_dob3 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_PlannedDownTime_Val
    IF Cond_Running_dob3 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Running_Val
    IF Cond_Starving_dob3 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Starving_Val
    IF Cond_Blocked_dob3 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Blocked_Val
    IF Cond_Ready_dob3 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Ready_Val
    IF Cond_Falha_dob3 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Falha_Val
    IF Cond_Setup_dob3 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Setup_Val
    IF Cond_Emergencia_dob3 = 1 THEN currentStatusINT = currentStatusINT + Status_Bit_Emergencia_Val
    
    MachineStatusINT_dob3 = currentStatusINT
    Err = SETREG(DOB3_REG_LOC_STATUS_MAQUINA, MachineStatusINT_dob3, DXM_LocalReg, HoldingReg)
    CheckError("CalcularEMostrarStatus_dob3 SETREG DOB3_REG_LOC_STATUS_MAQUINA com valor: " + MachineStatusINT_dob3)
END FUNCTION

'Rotina Cíclica
While(1)
    
    ' --- Processamento para DOB1 ---
    TempoDeCicloEContagem_dob1
    LerEntradas_dob1

    ' Definir condicoes de status para DOB1 (ajustar logica conforme necessario)
    Cond_PlannedDownTime_dob1 = 0 ' Exemplo
    Cond_Running_dob1 = Running_input_dob1
    Cond_Starving_dob1 = 0
    Cond_Blocked_dob1 = 0
    Cond_Ready_dob1 = Ready_input_dob1
    Cond_Falha_dob1 = Falha_input_dob1
    Cond_Setup_dob1 = 0           ' Exemplo
    Cond_Emergencia_dob1 = Emergency_input_dob1
    CalcularEMostrarStatus_dob1
    ' ---------------------------------------------------------------- 
    
    ' --- Processamento para DOB2 ---
    TempoDeCicloEContagem_dob2
    LerEntradas_dob2

    ' Definir condicoes de status para DOB2
    Cond_PlannedDownTime_dob2 = 0
    Cond_Running_dob2 = Running_input_dob2
    Cond_Starving_dob2 = 0
    Cond_Blocked_dob2 = 0
    Cond_Ready_dob2 = Ready_input_dob2
    Cond_Falha_dob2 = Falha_input_dob2
    Cond_Setup_dob2 = 0
    Cond_Emergencia_dob2 = Emergency_input_dob2
    CalcularEMostrarStatus_dob2
    ' ---------------------------------------------------------------- 

    ' --- Processamento para DOB3 ---
    TempoDeCicloEContagem_dob3
    LerEntradas_dob3

    ' Definir condicoes de status para DOB3
    Cond_PlannedDownTime_dob3 = 0
    Cond_Running_dob3 = Running_input_dob3
    Cond_Starving_dob3 = 0
    Cond_Blocked_dob3 = 0
    Cond_Ready_dob3 = Ready_input_dob3
    Cond_Falha_dob3 = Falha_input_dob3
    Cond_Setup_dob3 = 0
    Cond_Emergencia_dob3 = Emergency_input_dob3
    CalcularEMostrarStatus_dob3
    ' ---------------------------------------------------------------- 

    ' --- Verifica Conexao com as Maquinas ---
    ActiveConnection()

    ' Pequeno delay para nao sobrecarregar o processador
    DELAY(100)

Wend
